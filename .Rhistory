y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
ggplot(df, aes(x = PC1, y = PC2)) +
# Create a biplot
ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
# Create a biplot
g <- ggplot(df, aes(x = PC2, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
# Create a biplot
g <- ggplot2(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
g <- ggplot2(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
g <- ggplot2(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
# Create a biplot
g <- ggplot(df, aes(x = PC1, y = PC2)) +
# geom_hline(yintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
# geom_vline(xintercept = 0, color = "gray", size = 0.5, linetype = "dashed") +
geom_point(aes(color = Species), size = 3, alpha = 0.7) +
# geom_segment(aes(x = 0, y = 0, xend = PC1_arrow, yend = PC2_arrow),
# arrow = arrow(length = unit(0.2, "cm"), type = "closed"), size = 0.7) +
# geom_text(aes(x = PC1_arrow, y = PC2_arrow, label = names(iris)[1:4]),
#           hjust = ifelse(df$PC1_arrow < 0, 1.2, -0.2),
#           vjust = ifelse(df$PC2_arrow < 0, 1.2, -0.2),
#           size = 3.5) +
# labs(title = "PCA biplot", x = paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)"),
# y = paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
scale_color_discrete(name = "Species")
g
library(ggplot2)
library(ggfortify)
library(dplyr)
source("C:/Users/Eric/Documents/hw4-111971030/test_pca.R")
# 將主成分繪製為雙變量散點圖
g <- ggplot(pca_df, aes(x = PC2, y = PC2, color = group)) +
geom_point(size = 3, alpha = 0.8) +
xlab(paste0("PC1 (", round(pca_contributions[1,2], 1), "%)")) +
ylab(paste0("PC2 (", round(pca_contributions[2,2], 1), "%)")) +
scale_color_discrete(name = "Species") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
# 加上變量的箭頭
geom_segment(aes(x = 0, y = 0, xend = loadings(pca)[,1]*3, yend = loadings(pca)[,2]*3),
arrow = arrow(length = unit(0.3, "cm")),
color = "black") +
geom_text(aes(x = loadings(pca)[,1]*3, y = loadings(pca)[,2]*3, label = rownames(loadings(pca))),
color = "black", size = 3.5) +
# 加上圓圈
stat_ellipse(aes(x = PC1, y = PC2, group = group), alpha = 0.2,
level = 0.95, type = "t", geom = "polygon")
g
source("C:/Users/Eric/Documents/hw4-111971030/test_pca.R")
source("C:/Users/Eric/Documents/hw4-111971030/test_pca.R")
# PCA
data(iris)
pca <- prcomp(iris[,1:4], scale. = TRUE)
pca_df <- as.data.frame(pca$x) %>%
select(1, 2) %>%
mutate(group = iris$Species)
# PC1 和 PC2的貢獻
pca_contributions <- data.frame(
PC = c("PC2", "PC2"),
Contribution = pca$sdev^2 / sum(pca$sdev^2) * 100
)
# 顯示累積貢獻率
pca_contributions <- pca_contributions %>%
mutate(Cumulative.Contribution = cumsum(Contribution))
# 將主成分繪製為雙變量散點圖
g <- ggplot(pca_df, aes(x = PC2, y = PC2, color = group)) +
geom_point(size = 3, alpha = 0.8) +
xlab(paste0("PC1 (", round(pca_contributions[1,2], 1), "%)")) +
ylab(paste0("PC2 (", round(pca_contributions[2,2], 1), "%)")) +
scale_color_discrete(name = "Species") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
# 加上變量的箭頭
geom_segment(aes(x = 0, y = 0, xend = loadings(pca)[,1]*3, yend = loadings(pca)[,2]*3),
arrow = arrow(length = unit(0.3, "cm")),
color = "black") +
geom_text(aes(x = loadings(pca)[,1]*3, y = loadings(pca)[,2]*3, label = rownames(loadings(pca))),
color = "black", size = 3.5) +
# 加上圓圈
stat_ellipse(aes(x = PC1, y = PC2, group = group), alpha = 0.2,
level = 0.95, type = "t", geom = "polygon")
g
# 將主成分繪製為雙變量散點圖
g <- ggplot(pca_df, aes(x = PC2, y = PC2, color = group)) +
geom_point(size = 3, alpha = 0.8) +
xlab(paste0("PC1 (", round(pca_contributions[1,2], 1), "%)")) +
ylab(paste0("PC2 (", round(pca_contributions[2,2], 1), "%)")) +
scale_color_discrete(name = "Species") +
theme(legend.direction = 'horizontal', legend.position = 'top') +
# 加上變量的箭頭
geom_segment(aes(x = 0, y = 0, xend = loadings(pca)[,1]*3, yend = loadings(pca)[,2]*3),
arrow = arrow(length = unit(0.3, "cm")),
color = "black") +
geom_text(aes(x = loadings(pca)[,1]*3, y = loadings(pca)[,2]*3, label = rownames(loadings(pca))),
color = "black", size = 3.5) +
# 加上圓圈
stat_ellipse(aes(x = PC2, y = PC2, group = group), alpha = 0.2,
level = 0.95, type = "t", geom = "polygon")
g
library(ggplot2)
library(datasets)
data(iris)
iris.pca <- prcomp(iris[,1:4], scale. = TRUE)
iris_df <- data.frame(iris.pca$x, Species = iris$Species)
# 計算變量箭頭的起點和終點
arrow_df <- data.frame(
x = rep(0, ncol(iris.pca$rotation)),
y = rep(0, ncol(iris.pca$rotation)),
xend = iris.pca$rotation[,1],
yend = iris.pca$rotation[,2]
)
# 合併 iris_df 和 arrow_df
df <- merge(iris_df, arrow_df, by = 0)
g <- ggplot(df, aes(x = PC1, y = PC2, color = Species)) +
geom_point() +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.3, "cm")),
lineend = "butt") +
scale_color_discrete(name = '') +
xlab(paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)")) +
ylab(paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
theme_classic()
g
library(ggplot2)
library(datasets)
data(iris)
iris.pca <- prcomp(iris[,1:4], scale. = TRUE)
iris_df <- data.frame(iris.pca$x, Species = iris$Species)
# 計算變量箭頭的起點和終點
arrow_df <- data.frame(
x = rep(0, ncol(iris.pca$rotation)),
y = rep(0, ncol(iris.pca$rotation)),
xend = iris.pca$rotation[,1],
yend = iris.pca$rotation[,2]
)
# 合併 iris_df 和 arrow_df
df <- merge(iris_df, arrow_df, by = 0)
g <- ggplot(df, aes(x = PC1, y = PC2, color = Species)) +
geom_point() +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.3, "cm")),
lineend = "butt") +
scale_color_discrete(name = '') +
xlab(paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)")) +
ylab(paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
theme_classic()
g
iris_df <- data.frame(iris.pca, Species = iris$Species)
$x
iris_df <- data.frame(iris.pca, Species = iris$Species)
iris_df <- data.frame(iris.pca$x, Species = iris$Species)
# 計算變量箭頭的起點和終點
arrow_df <- data.frame(
x = rep(0, ncol(iris.pca$rotation)),
y = rep(0, ncol(iris.pca$rotation)),
xend = iris.pca$rotation[,1],
yend = iris.pca$rotation[,2]
)
# 合併 iris_df 和 arrow_df
df <- merge(iris_df, arrow_df, by = 0)
g <- ggplot(df, aes(x = PC1, y = PC2, color = Species)) +
geom_point() +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.3, "cm")),
lineend = "butt") +
scale_color_discrete(name = '') +
xlab(paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)")) +
ylab(paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
theme_classic()
g
data(iris)
iris.pca <- prcomp(iris[,1:4], scale. = TRUE)
# Get variable loadings
var_loadings <- iris.pca$rotation[, 1:2]
var_names <- rownames(var_loadings)
# Get observation scores
obs_scores <- iris.pca$x[, 1:2]
# Create data frames for variable loadings and observation scores
var_df <- data.frame(var_names, var_loadings)
obs_df <- data.frame(obs_scores, Species = iris$Species)
# Plot variable loadings as arrows
arrow_df <- data.frame(x = 0, y = 0, xend = var_df$PC1, yend = var_df$PC2, label = var_df$var_names)
# Plot observation scores as points and add color by species
obs_plot <- ggplot(obs_df, aes(x = PC1, y = PC2, color = Species)) +
geom_point() +
xlab(paste0("PC1 (", round(summary(iris.pca)$importance[2,1]*100, 1), "%)")) +
ylab(paste0("PC2 (", round(summary(iris.pca)$importance[2,2]*100, 1), "%)")) +
theme_bw()
# Add variable loadings arrows to plot
obs_plot +
geom_segment(data = arrow_df, aes(x = x, y = y, xend = xend, yend = yend),
arrow = arrow(length = unit(0.1, "inches"), type = "closed")) +
geom_text(data = arrow_df, aes(x = xend, y = yend, label = label), hjust = 1.2)
runApp('hw4-111971030/test_pca.R')
runApp('hw4-111971030/test_pca.R')
data(iris)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
h2("PCA"),
selectInput("x_var", "X-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
selectInput("y_var", "Y-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
plotOutput("pca_plot")
)
# Server
server <- function(input, output, session) {
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)
# define PCA
pca_data <- reactive({
x_var <- switch(input$x_var,
"PC1" = ir.pca$x[, 1],
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
y_var <- switch(input$y_var,
"PC1" = ir.pca$x[, 1],
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
data.frame(x = x_var, y = y_var, species = ir.species)
})
# plot PCA
plotPCA <- function() {
ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species, ellipse =TRUE) +
# geom_point(aes(x = pca_data()$x, y = pca_data()$y, color = pca_data()$species)) +
theme(legend.direction = 'horizontal', legend.position = 'top') +
scale_color_discrete(name = '')
}
# render PCA plot
output$pca_plot <- renderPlot({ plotPCA() })
}
# 執行應用
shinyApp(ui, server)
runApp('hw4-111971030/test_pca.R')
runApp('hw4-111971030/test_pca.R')
runApp('hw4-111971030/test_pca.R')
runApp('hw4-111971030/test_pca.R')
runApp('hw4-111971030')
runApp('hw4-111971030')
setwd("~/hw4-111971030")
runApp()
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
library(ggbiplot)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
#g <- g + scale_color_discrete(name = '')
#g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
print(g)
if(!require('ggbiplot')) {
install.packages('remotes', dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
}
data(iris)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
h2("PCA"),
selectInput("x_var", "X-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
selectInput("y_var", "Y-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
plotOutput("pca_plot")
)
# Server
server <- function(input, output, session) {
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)
# define PCA
pca_data <- reactive({
x_var <- switch(input$x_var,
"PC1" = ir.pca$rotation[, 1] %*% t(log.ir),
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
y_var <- switch(input$y_var,
"PC1" = ir.pca$rotation[, 1] %*% t(log.ir),
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
data.frame(x = x_var, y = y_var, species = ir.species)
})
# plot PCA
plotPCA <- function() {
ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species, ellipse =TRUE) +
geom_point(aes(x = pca_data()$x, y = pca_data()$y, color = pca_data()$species)) +
theme(legend.direction = 'horizontal', legend.position = 'top') +
scale_color_discrete(name = '')
}
# render PCA plot
output$pca_plot <- renderPlot({ plotPCA() })
}
# 執行應用
shinyApp(ui, server)
if(!require('shiny')) {
install.packages('shiny')
library('shiny')
}
if(!require('ggbiplot')) {
install.packages('remotes', dependencies = TRUE)
remotes::install_github("vqv/ggbiplot")
library('ggbiplot')
}
data(iris)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
h2("PCA"),
selectInput("x_var", "X-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
selectInput("y_var", "Y-Axis Variable:",
choices = c("PC1", "PC2", "PC3", "PC4")),
plotOutput("pca_plot")
)
# Server
server <- function(input, output, session) {
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir, center = TRUE, scale. = TRUE)
# define PCA
pca_data <- reactive({
x_var <- switch(input$x_var,
"PC1" = ir.pca$rotation[, 1] %*% t(log.ir),
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
y_var <- switch(input$y_var,
"PC1" = ir.pca$rotation[, 1] %*% t(log.ir),
"PC2" = ir.pca$x[, 2],
"PC3" = ir.pca$x[, 3],
"PC4" = ir.pca$x[, 4])
data.frame(x = x_var, y = y_var, species = ir.species)
})
# plot PCA
plotPCA <- function() {
ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species, ellipse =TRUE) +
geom_point(aes(x = pca_data()$x, y = pca_data()$y, color = pca_data()$species)) +
theme(legend.direction = 'horizontal', legend.position = 'top') +
scale_color_discrete(name = '')
}
# render PCA plot
output$pca_plot <- renderPlot({ plotPCA() })
}
# 執行應用
shinyApp(ui, server)
runApp('test_pca.R')
